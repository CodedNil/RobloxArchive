<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="LocalScript" referent="RBX4C6F267608614820910E99DBCA3D58CC">
		<Properties>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">GunAnimations</string>
			<string name="ScriptGuid"></string>
			<ProtectedString name="Source"><![CDATA[repeat wait() until _G.SRequire
local Core = _G.SRequire("S2.0 Core", "Core")
local KeybindUtil = _G.SRequire("S2.0 KeybindUtil", "KeybindUtil")
local PoseUtil = _G.SRequire("S2.0 PoseUtil", "PoseUtil")

local Player = game.Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.Camera
repeat wait() until Player.Character
local Character = Player.Character

local Head, Torso, LeftArm, RightArm, Humanoid, LeftWeld, RightWeld, Grip

local function NewCharacter(Character)
	Head = Character:WaitForChild("Head")
	Torso = Character:WaitForChild("Torso")
	LeftArm = Character:WaitForChild("Left Arm")
	RightArm = Character:WaitForChild("Right Arm")
	Humanoid = Character:WaitForChild("Humanoid")
	
	RightArm.ChildAdded:Connect(function(Child)
		wait()
		if Child.Name == "RightGrip" and Child:IsA("Weld") then
			local New = Instance.new("Motor6D")
			New.Part0 = Child.Part0
			New.Part1 = Child.Part1
--			New.C0 = Child.C0
--			New.C1 = Child.C1
			New.Name = "RightGrip"
			New.Parent = RightArm
			Child:Destroy()
		end
	end)
	
	LeftArm.LocalTransparencyModifier = 0
	LeftArm.Changed:Connect(function()
		LeftArm.LocalTransparencyModifier = 0
	end)
	RightArm.LocalTransparencyModifier = 0
	RightArm.Changed:Connect(function()
		RightArm.LocalTransparencyModifier = 0
	end)
end
Player.CharacterAdded:Connect(NewCharacter)
NewCharacter(Character)

--local Obj = Instance.new("Animation")
--Obj.AnimationId = "rbxassetid://"..581415997
--local HoldAnimation = Humanoid:LoadAnimation(Obj)
--
--local Obj = Instance.new("Animation")
--Obj.AnimationId = "rbxassetid://"..581420947 
--local WalkAnimation = Humanoid:LoadAnimation(Obj)

local AnimationIds = {
	Idle = 581415997,
	Walk = 581420947,
	Run = 581428902,
}

local AnimationTable = {}
for i, v in pairs(AnimationIds) do
	AnimationTable[i] = Instance.new("Animation")
	AnimationTable[i].AnimationId = "rbxassetid://"..v
end

local CurrentAnim, CurrentAnimTrack, CurrentAnimSpeed
function SetAnimationSpeed(Speed)
	if Speed ~= CurrentAnimSpeed and CurrentAnimTrack then
		CurrentAnimSpeed = Speed
		CurrentAnimTrack:AdjustSpeed(Speed)
	end
end

local function PlayAnimation(Animation, Transition)
	if Animation ~= CurrentAnim then
		CurrentAnim = Animation
		local Old = CurrentAnimTrack
		
		CurrentAnimSpeed = 1
		CurrentAnimTrack = Humanoid:LoadAnimation(AnimationTable[Animation])
		CurrentAnimTrack:Play(Transition)
		
		if Old then
			Old:Stop(Transition)
			Old:Destroy()
		end
	end
end

function StopAllAnimations()
	CurrentAnim = nil
	if CurrentAnimTrack then
		CurrentAnimTrack:Stop()
		CurrentAnimTrack:Destroy()
		CurrentAnimTrack = nil
	end
end

local Selected = false

local State = "Idle"
local function Update()
	if not Selected then return end
	
	local Sprinting = Core.ActualSprinting and Core.ActualSprinting() or false
	local Aiming = Core.IsScoping and Core.IsScoping() or false
	local WalkSpeed = Humanoid.MoveDirection.magnitude
	
	local HumanoidState = Humanoid:GetState()
--	if Reloading then
--		State = "Reloading"
	if HumanoidState == "Freefall" or HumanoidState == "Jumping" then
		State = "Jumping"
	elseif Sprinting then
		State = "Running"
--	elseif Aiming then
--		State = "Aiming"
	elseif WalkSpeed > 0 then
		State = "Walking"
	else
		State = "Idle"
	end
	
	if State == "Idle" then
		PlayAnimation("Idle", 0.1)
	elseif State == "Walking" then
		PlayAnimation("Walk", 0.1)
		SetAnimationSpeed(WalkSpeed)
	elseif State == "Running" then
		PlayAnimation("Run", 0.1)
		SetAnimationSpeed(WalkSpeed * 1.5)
	end
end

Humanoid.Running:Connect(function(Speed)
	Update()
end)

PoseUtil.PoseChanged:Connect(function(NPlr, Pose, State, Instant)
	if Pose == "Sprinting" and NPlr == Player then
		Update()
	elseif Pose == "Scoping" and NPlr == Player then
		Update()
	end
end)

Core.WeaponSelected.Event:Connect(function(StatObj)
	if not StatObj or not StatObj.Parent then return end
	Selected = true
	Update()
	PlayAnimation("Idle", 0.1)
end)

Core.WeaponDeselected.Event:Connect(function(StatObj)
	if not StatObj or not StatObj.Parent then return end
	Selected = false
	StopAllAnimations()
end)]]></ProtectedString>
		</Properties>
		<Item class="LocalScript" referent="RBX7762043793F843F0B22C6ABF7FA3BB7E">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Animate</string>
				<string name="ScriptGuid"></string>
				<ProtectedString name="Source"><![CDATA[function   waitForChild(parent, childName)
	local child = parent:findFirstChild(childName)
	if child then return child end
	while true do
		child = parent.ChildAdded:wait()
		if child.Name==childName then return child end
	end
end

local Figure = script.Parent
local Torso = waitForChild(Figure, "Torso")
local RightShoulder = waitForChild(Torso, "Right Shoulder")
local LeftShoulder = waitForChild(Torso, "Left Shoulder")
local RightHip = waitForChild(Torso, "Right Hip")
local LeftHip = waitForChild(Torso, "Left Hip")
local Neck = waitForChild(Torso, "Neck")
local Humanoid = waitForChild(Figure, "Humanoid")
local pose = "Standing"

local currentAnim = ""
local currentAnimInstance = nil
local currentAnimTrack = nil
local currentAnimKeyframeHandler = nil
local currentAnimSpeed = 1.0
local animTable = {}
local animNames = { 
	idle = 	{	
				{ id = "http://www.roblox.com/asset/?id=180435571", weight = 9 },
				{ id = "http://www.roblox.com/asset/?id=180435792", weight = 1 }
			},
	walk = 	{ 	
				{ id = "http://www.roblox.com/asset/?id=180426354", weight = 10 } 
			}, 
	run = 	{
				{ id = "run.xml", weight = 10 } 
			}, 
	jump = 	{
				{ id = "http://www.roblox.com/asset/?id=125750702", weight = 10 } 
			}, 
	fall = 	{
				{ id = "http://www.roblox.com/asset/?id=180436148", weight = 10 } 
			}, 
	climb = {
				{ id = "http://www.roblox.com/asset/?id=180436334", weight = 10 } 
			}, 
	sit = 	{
				{ id = "http://www.roblox.com/asset/?id=178130996", weight = 10 } 
			},	
	toolnone = {
				{ id = "http://www.roblox.com/asset/?id=182393478", weight = 10 } 
			},
	toolslash = {
				{ id = "http://www.roblox.com/asset/?id=129967390", weight = 10 } 
--				{ id = "slash.xml", weight = 10 } 
			},
	toollunge = {
				{ id = "http://www.roblox.com/asset/?id=129967478", weight = 10 } 
			},
	wave = {
				{ id = "http://www.roblox.com/asset/?id=128777973", weight = 10 } 
			},
	point = {
				{ id = "http://www.roblox.com/asset/?id=128853357", weight = 10 } 
			},
	dance1 = {
				{ id = "http://www.roblox.com/asset/?id=182435998", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=182491037", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=182491065", weight = 10 } 
			},
	dance2 = {
				{ id = "http://www.roblox.com/asset/?id=182436842", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=182491248", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=182491277", weight = 10 } 
			},
	dance3 = {
				{ id = "http://www.roblox.com/asset/?id=182436935", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=182491368", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=182491423", weight = 10 } 
			},
	laugh = {
				{ id = "http://www.roblox.com/asset/?id=129423131", weight = 10 } 
			},
	cheer = {
				{ id = "http://www.roblox.com/asset/?id=129423030", weight = 10 } 
			},
}
local dances = {"dance1", "dance2", "dance3"}

-- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
local emoteNames = { wave = false, point = false, dance1 = true, dance2 = true, dance3 = true, laugh = false, cheer = false}

function configureAnimationSet(name, fileList)
	if (animTable[name] ~= nil) then
		for _, connection in pairs(animTable[name].connections) do
			connection:disconnect()
		end
	end
	animTable[name] = {}
	animTable[name].count = 0
	animTable[name].totalWeight = 0	
	animTable[name].connections = {}

	-- check for config values
	local config = script:FindFirstChild(name)
	if (config ~= nil) then
--		print("Loading anims " .. name)
		table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
		table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
		local idx = 1
		for _, childPart in pairs(config:GetChildren()) do
			if (childPart:IsA("Animation")) then
				table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
				animTable[name][idx] = {}
				animTable[name][idx].anim = childPart
				local weightObject = childPart:FindFirstChild("Weight")
				if (weightObject == nil) then
					animTable[name][idx].weight = 1
				else
					animTable[name][idx].weight = weightObject.Value
				end
				animTable[name].count = animTable[name].count + 1
				animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
	--			print(name .. " [" .. idx .. "] " .. animTable[name][idx].anim.AnimationId .. " (" .. animTable[name][idx].weight .. ")")
				idx = idx + 1
			end
		end
	end

	-- fallback to defaults
	if (animTable[name].count <= 0) then
		for idx, anim in pairs(fileList) do
			animTable[name][idx] = {}
			animTable[name][idx].anim = Instance.new("Animation")
			animTable[name][idx].anim.Name = name
			animTable[name][idx].anim.AnimationId = anim.id
			animTable[name][idx].weight = anim.weight
			animTable[name].count = animTable[name].count + 1
			animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
--			print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
		end
	end
end

-- Setup animation objects
function scriptChildModified(child)
	local fileList = animNames[child.Name]
	if (fileList ~= nil) then
		configureAnimationSet(child.Name, fileList)
	end	
end

script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)


for name, fileList in pairs(animNames) do 
	configureAnimationSet(name, fileList)
end	

-- ANIMATION

-- declarations
local toolAnim = "None"
local toolAnimTime = 0

local jumpAnimTime = 0
local jumpAnimDuration = 0.3

local toolTransitionTime = 0.1
local fallTransitionTime = 0.3
local jumpMaxLimbVelocity = 0.75

-- functions

function stopAllAnimations()
	local oldAnim = currentAnim

	-- return to idle if finishing an emote
	if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
		oldAnim = "idle"
	end

	currentAnim = ""
	currentAnimInstance = nil
	if (currentAnimKeyframeHandler ~= nil) then
		currentAnimKeyframeHandler:disconnect()
	end

	if (currentAnimTrack ~= nil) then
		currentAnimTrack:Stop()
		currentAnimTrack:Destroy()
		currentAnimTrack = nil
	end
	return oldAnim
end

function setAnimationSpeed(speed)
	if speed ~= currentAnimSpeed then
		currentAnimSpeed = speed
		currentAnimTrack:AdjustSpeed(currentAnimSpeed)
	end
end

function keyFrameReachedFunc(frameName)
	if (frameName == "End") then

		local repeatAnim = currentAnim
		-- return to idle if finishing an emote
		if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
			repeatAnim = "idle"
		end
		
		local animSpeed = currentAnimSpeed
		playAnimation(repeatAnim, 0.0, Humanoid)
		setAnimationSpeed(animSpeed)
	end
end

-- Preload animations
function playAnimation(animName, transitionTime, humanoid) 
		
	local roll = math.random(1, animTable[animName].totalWeight) 
	local origRoll = roll
	local idx = 1
	while (roll > animTable[animName][idx].weight) do
		roll = roll - animTable[animName][idx].weight
		idx = idx + 1
	end
--		print(animName .. " " .. idx .. " [" .. origRoll .. "]")
	local anim = animTable[animName][idx].anim

	-- switch animation		
	if (anim ~= currentAnimInstance) then
		
		if (currentAnimTrack ~= nil) then
			currentAnimTrack:Stop(transitionTime)
			currentAnimTrack:Destroy()
		end

		currentAnimSpeed = 1.0
	
		-- load it to the humanoid; get AnimationTrack
		currentAnimTrack = humanoid:LoadAnimation(anim)
		 
		-- play the animation
		currentAnimTrack:Play(transitionTime)
		currentAnim = animName
		currentAnimInstance = anim

		-- set up keyframe name triggers
		if (currentAnimKeyframeHandler ~= nil) then
			currentAnimKeyframeHandler:disconnect()
		end
		currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
		
	end

end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

local toolAnimName = ""
local toolAnimTrack = nil
local toolAnimInstance = nil
local currentToolAnimKeyframeHandler = nil

function toolKeyFrameReachedFunc(frameName)
	if (frameName == "End") then
--		print("Keyframe : ".. frameName)	
		playToolAnimation(toolAnimName, 0.0, Humanoid)
	end
end


function playToolAnimation(animName, transitionTime, humanoid)	 
		
		local roll = math.random(1, animTable[animName].totalWeight) 
		local origRoll = roll
		local idx = 1
		while (roll > animTable[animName][idx].weight) do
			roll = roll - animTable[animName][idx].weight
			idx = idx + 1
		end
--		print(animName .. " * " .. idx .. " [" .. origRoll .. "]")
		local anim = animTable[animName][idx].anim

		if (toolAnimInstance ~= anim) then
			
			if (toolAnimTrack ~= nil) then
				toolAnimTrack:Stop()
				toolAnimTrack:Destroy()
				transitionTime = 0
			end
					
			-- load it to the humanoid; get AnimationTrack
			toolAnimTrack = humanoid:LoadAnimation(anim)
			 
			-- play the animation
			toolAnimTrack:Play(transitionTime)
			toolAnimName = animName
			toolAnimInstance = anim

			currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
		end
end

function stopToolAnimations()
	local oldAnim = toolAnimName

	if (currentToolAnimKeyframeHandler ~= nil) then
		currentToolAnimKeyframeHandler:disconnect()
	end

	toolAnimName = ""
	toolAnimInstance = nil
	if (toolAnimTrack ~= nil) then
		toolAnimTrack:Stop()
		toolAnimTrack:Destroy()
		toolAnimTrack = nil
	end


	return oldAnim
end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


function onRunning(speed)
	if speed>0.01 then
		playAnimation("walk", 0.1, Humanoid)
		if currentAnimInstance and currentAnimInstance.AnimationId == "http://www.roblox.com/asset/?id=180426354" then
			setAnimationSpeed(speed / 14.5)
		end
		pose = "Running"
	else
		if emoteNames[currentAnim] == nil then
			playAnimation("idle", 0.1, Humanoid)
			pose = "Standing"
		end
	end
end

function onDied()
	pose = "Dead"
end

function onJumping()
	playAnimation("jump", 0.1, Humanoid)
	jumpAnimTime = jumpAnimDuration
	pose = "Jumping"
end

function onClimbing(speed)
	playAnimation("climb", 0.1, Humanoid)
	setAnimationSpeed(speed / 12.0)
	pose = "Climbing"
end

function onGettingUp()
	pose = "GettingUp"
end

function onFreeFall()
	if (jumpAnimTime <= 0) then
		playAnimation("fall", fallTransitionTime, Humanoid)
	end
	pose = "FreeFall"
end

function onFallingDown()
	pose = "FallingDown"
end

function onSeated()
	pose = "Seated"
end

function onPlatformStanding()
	pose = "PlatformStanding"
end

function onSwimming(speed)
	if speed>0 then
		pose = "Running"
	else
		pose = "Standing"
	end
end

function getTool()	
	for _, kid in ipairs(Figure:GetChildren()) do
		if kid.className == "Tool" then return kid end
	end
	return nil
end

function getToolAnim(tool)
	for _, c in ipairs(tool:GetChildren()) do
		if c.Name == "toolanim" and c.className == "StringValue" then
			return c
		end
	end
	return nil
end

function animateTool()
	
	if (toolAnim == "None") then
		playToolAnimation("toolnone", toolTransitionTime, Humanoid)
		return
	end

	if (toolAnim == "Slash") then
		playToolAnimation("toolslash", 0, Humanoid)
		return
	end

	if (toolAnim == "Lunge") then
		playToolAnimation("toollunge", 0, Humanoid)
		return
	end
end

function moveSit()
	RightShoulder.MaxVelocity = 0.15
	LeftShoulder.MaxVelocity = 0.15
	RightShoulder:SetDesiredAngle(3.14 /2)
	LeftShoulder:SetDesiredAngle(-3.14 /2)
	RightHip:SetDesiredAngle(3.14 /2)
	LeftHip:SetDesiredAngle(-3.14 /2)
end

local lastTick = 0

function move(time)
	local amplitude = 1
	local frequency = 1
  	local deltaTime = time - lastTick
  	lastTick = time

	local climbFudge = 0
	local setAngles = false

  	if (jumpAnimTime > 0) then
  		jumpAnimTime = jumpAnimTime - deltaTime
  	end

	if (pose == "FreeFall" and jumpAnimTime <= 0) then
		playAnimation("fall", fallTransitionTime, Humanoid)
	elseif (pose == "Seated") then
		playAnimation("sit", 0.5, Humanoid)
		return
	elseif (pose == "Running") then
		playAnimation("walk", 0.1, Humanoid)
	elseif (pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding") then
--		print("Wha " .. pose)
		stopAllAnimations()
		amplitude = 0.1
		frequency = 1
		setAngles = true
	end

	if (setAngles) then
		desiredAngle = amplitude * math.sin(time * frequency)

		RightShoulder:SetDesiredAngle(desiredAngle + climbFudge)
		LeftShoulder:SetDesiredAngle(desiredAngle - climbFudge)
		RightHip:SetDesiredAngle(-desiredAngle)
		LeftHip:SetDesiredAngle(-desiredAngle)
	end

	-- Tool Animation handling
	local tool = getTool()
	if tool and tool:FindFirstChild("Handle") then
	
		animStringValueObject = getToolAnim(tool)

		if animStringValueObject then
			toolAnim = animStringValueObject.Value
			-- message recieved, delete StringValue
			animStringValueObject.Parent = nil
			toolAnimTime = time + .3
		end

		if time > toolAnimTime then
			toolAnimTime = 0
			toolAnim = "None"
		end

		animateTool()		
	else
		stopToolAnimations()
		toolAnim = "None"
		toolAnimInstance = nil
		toolAnimTime = 0
	end
end

-- connect events
Humanoid.Died:connect(onDied)
Humanoid.Running:connect(onRunning)
Humanoid.Jumping:connect(onJumping)
Humanoid.Climbing:connect(onClimbing)
Humanoid.GettingUp:connect(onGettingUp)
Humanoid.FreeFalling:connect(onFreeFall)
Humanoid.FallingDown:connect(onFallingDown)
Humanoid.Seated:connect(onSeated)
Humanoid.PlatformStanding:connect(onPlatformStanding)
Humanoid.Swimming:connect(onSwimming)

-- setup emote chat hook
game.Players.LocalPlayer.Chatted:connect(function(msg)
	local emote = ""
	if msg == "/e dance" then
		emote = dances[math.random(1, #dances)]
	elseif (string.sub(msg, 1, 3) == "/e ") then
		emote = string.sub(msg, 4)
	elseif (string.sub(msg, 1, 7) == "/emote ") then
		emote = string.sub(msg, 8)
	end
	
	if (pose == "Standing" and emoteNames[emote] ~= nil) then
		playAnimation(emote, 0.1, Humanoid)
	end

end)


-- main program

local runService = game:service("RunService");

-- initialize to idle
playAnimation("idle", 0.1, Humanoid)
pose = "Standing"

while Figure.Parent~=nil do
	local _, time = wait(0.1)
	move(time)
end


]]></ProtectedString>
			</Properties>
			<Item class="StringValue" referent="RBXB2313D9588834C418E8059DD5A8CCE1B">
				<Properties>
					<string name="Name">idle</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBX26D9277167C74F30AC4295DB35AB91E0">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=180435571</url></Content>
						<string name="Name">Animation1</string>
					</Properties>
					<Item class="NumberValue" referent="RBX31B767D2767C41DB858FC7592055F278">
						<Properties>
							<string name="Name">Weight</string>
							<double name="Value">9</double>
						</Properties>
					</Item>
				</Item>
				<Item class="Animation" referent="RBXFDE32B1307EB4ABDA75C4C8406FA8768">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=180435792</url></Content>
						<string name="Name">Animation2</string>
					</Properties>
					<Item class="NumberValue" referent="RBX54A386BEC63245C18388DEB1F6AC3B54">
						<Properties>
							<string name="Name">Weight</string>
							<double name="Value">1</double>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBXBD41B6BEA830463CB0FE8D824921C1B8">
				<Properties>
					<string name="Name">walk</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBXFEB31ACFAE2C41C782A8D7735B507958">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=180426354</url></Content>
						<string name="Name">WalkAnim</string>
					</Properties>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBXD91D27DD260549FAA5A4C07BCD064626">
				<Properties>
					<string name="Name">run</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBXB67CEEA2E407432EACD41F42C47ABE26">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=180426354</url></Content>
						<string name="Name">RunAnim</string>
					</Properties>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBX4623F0BF1F274068B207192A630240D4">
				<Properties>
					<string name="Name">jump</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBXE81ED0B9C99146759F02F78458642775">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=125750702</url></Content>
						<string name="Name">JumpAnim</string>
					</Properties>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBXE0DFB401951042FEBF01F7156ED49EBC">
				<Properties>
					<string name="Name">climb</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBX79BF016D03A245339690862F3569D7A0">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=180436334</url></Content>
						<string name="Name">ClimbAnim</string>
					</Properties>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBX06822EB4555F461E916EAA88CA183E07">
				<Properties>
					<string name="Name">toolnone</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBX938A096EAEEC46FF9C90985CE126E7BC">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=182393478</url></Content>
						<string name="Name">ToolNoneAnim</string>
					</Properties>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBX1CA6BA9716714F4BB8555D69922A2E1B">
				<Properties>
					<string name="Name">fall</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBXFC3F956C59634B25BF554E3E0DA2A7CD">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=180436148</url></Content>
						<string name="Name">FallAnim</string>
					</Properties>
				</Item>
			</Item>
			<Item class="StringValue" referent="RBXCCD05DA921B846189C687DD53608B88E">
				<Properties>
					<string name="Name">sit</string>
					<string name="Value"></string>
				</Properties>
				<Item class="Animation" referent="RBX772F8F2F7D054FD9B930A7582BC6BFEC">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=178130996</url></Content>
						<string name="Name">SitAnim</string>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>